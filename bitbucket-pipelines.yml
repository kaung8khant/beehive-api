# Template PHP Build

# This template allows you to validate your PHP application.
# The workflow allows running tests and code linting on the default branch.

image: php:8.0

pipelines:
  branches:
    staging:
      - step:
          name: Security Scan for Staging
          script:
            # Run a security scan for sensitive data.
            # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
            - pipe: atlassian/git-secrets-scan:0.4.3
      - step:
          name: "Deploy to Staging"
          deployment: Staging
          clone:
            enabled: false
          script:
            - pipe: atlassian/ssh-run:0.3.0
              variables:
                SSH_USER: "root"
                SERVER: "172.104.166.202"
                COMMAND: "./deploy.sh"
    master:
      - parallel:
          - step:
              name: Security Scan for Production
              script:
                # Run a security scan for sensitive data.
                # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
                - pipe: atlassian/git-secrets-scan:0.4.3
          - step:
              name: "Package Project"
              # Track production environments builds using deployments.
              deployment: Production
              script:
                # Installing first the libraries necessary to configure and install gd
                - apt update && apt install -y libfreetype6-dev libjpeg62-turbo-dev libpng-dev libzip-dev zip && docker-php-ext-install zip
                - docker-php-ext-configure gd --with-freetype --with-jpeg
                # - apt-get install -y zlib1g-dev
                - docker-php-ext-install -j$(nproc) gd
                # copy env file
                - cp .env.example .env
                - curl -o dotenv https://raw.githubusercontent.com/bashup/dotenv/master/dotenv
                - chmod +x dotenv
                - >
                  ./dotenv -f .env set AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                  AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                  APP_KEY=${APP_KEY}
                  JWT_SECRET=${JWT_SECRET}
                  DB_DATABASE=${DB_DATABASE}
                  DB_USERNAME=${DB_USERNAME}
                  DB_PASSWORD=${DB_PASSWORD}
                  DB_HOST=${DB_HOST}
                  APP_ENV=${APP_ENV}
                  APP_URL=${APP_URL}
                  AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
                  AWS_BUCKET=${AWS_BUCKET}
                  BOOMSMS_API_KEY=${BOOMSMS_API_KEY}
                  FIREBASE_DATABASE_URL=${FIREBASE_DATABASE_URL}
                  SENTRY_LARAVEL_DSN=${SENTRY_LARAVEL_DSN}
                  SENTRY_TRACES_SAMPLE_RATE=1
                  APP_DEBUG=false
                  FILESYSTEM_DRIVER=s3
                  BUILD_NUMBER=${BITBUCKET_BUILD_NUMBER}
                  ONE_SIGNAL_ADMIN_APP_ID=${ONE_SIGNAL_ADMIN_APP_ID}
                  ONE_SIGNAL_ADMIN_API_KEY=${ONE_SIGNAL_ADMIN_API_KEY}
                  ONE_SIGNAL_VENDOR_APP_ID=${ONE_SIGNAL_VENDOR_APP_ID}
                  ONE_SIGNAL_VENDOR_API_KEY=${ONE_SIGNAL_VENDOR_API_KEY}
                  KBZ_PAY_NOTIFY_URL=https://api.beehivemm.com/api/v2/kbz/notify
                  KBZ_PAY_MERCH_CODE=${KBZ_PAY_MERCH_CODE}
                  KBZ_PAY_APP_ID=${KBZ_PAY_APP_ID}
                  KBZ_PAY_APP_KEY=${KBZ_PAY_APP_KEY}
                  KBZ_PAY_CREATE_URL=${KBZ_PAY_CREATE_URL}
                  CACHE_DRIVER=${CACHE_DRIVER}
                  QUEUE_CONNECTION=${QUEUE_CONNECTION}
                  REDIS_HOST=${REDIS_HOST}

                # add firebase credentials
                - echo ${FIREBASE_CREDENTIALS} > storage/firebase/firebase_credentials.json
                # install composer
                - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
                # install dependencies
                - composer update
                - composer install --optimize-autoloader --no-dev
                - zip -r application.zip . -x "vendor/*" "dotenv" ".profile_env"

              caches:
                - composer-cache
              # Define an artifact to pass the zip file to the next step
              artifacts:
                - application.zip
      - step:
          name: "Deploy to Production"
          clone:
            enabled: false
          script:
            - pipe: atlassian/aws-elasticbeanstalk-deploy:0.7.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                APPLICATION_NAME: "Beehive API Production"
                ENVIRONMENT_NAME: "beehive-api-production-env"
                ZIP_FILE: "application.zip"
                S3_BUCKET: "elasticbeanstalk-ap-southeast-1-565186916354"
                VERSION_LABEL: "beehive-$BITBUCKET_BRANCH-$BITBUCKET_BUILD_NUMBER"
definitions:
  caches:
    composer-cache: ./vendor
