# Template PHP Build

# This template allows you to validate your PHP application.
# The workflow allows running tests and code linting on the default branch.

image: composer:2.0

pipelines:
  branches:
    staging:
      # - step:
      #     name: Security Scan for Production
      #     script:
      #       # Run a security scan for sensitive data.
      #       # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
      #       - pipe: atlassian/git-secrets-scan:0.4.3
      - step:
          name: "Deploy to Staging"
          deployment: Staging
          clone:
            enabled: false
          script:
            - pipe: atlassian/ssh-run:0.3.0
              variables:
                SSH_USER: "root"
                SERVER: "139.162.51.4"
                COMMAND: "./deploy.sh"
    master:
      - parallel:
          - step:
              name: Security Scan for Production
              script:
                # Run a security scan for sensitive data.
                # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
                - pipe: atlassian/git-secrets-scan:0.4.3
          - step:
              name: "Package Project"
              # Track production environments builds using deployments.
              deployment: Production
              script:
                # copy env file
                - cp .env.example .env
                - curl -o dotenv https://raw.githubusercontent.com/bashup/dotenv/master/dotenv
                - chmod +x dotenv
                - >
                  ./dotenv -f .env set AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                  AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                  APP_KEY=${APP_KEY}
                  JWT_SECRET=${JWT_SECRET}
                  DB_DATABASE=${DB_DATABASE}
                  DB_USERNAME=${DB_USERNAME}
                  DB_PASSWORD=${DB_PASSWORD}
                  DB_HOST=${DB_HOST}
                  APP_ENV=${APP_ENV}
                  APP_URL=${APP_URL}
                  AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
                  AWS_BUCKET=${AWS_BUCKET}
                  BOOMSMS_API_KEY=${BOOMSMS_API_KEY}
                  FIREBASE_SERVER_KEY=${FIREBASE_SERVER_KEY}
                  APP_DEBUG=false
                  FILESYSTEM_DRIVER=s3

                # install dependencies
                - composer install
                - php artisan l5-swagger:generate
                - mkdir -p public/docs
                - cp storage/api-docs/api-docs.json public/docs/api-docs.json
                - zip -r application.zip . -x "vendor/*" "dotenv" ".profile_env"

              caches:
                - composer-cache
              # Define an artifact to pass the zip file to the next step
              artifacts:
                - application.zip
      - step:
          name: "Deploy to Production"
          clone:
            enabled: false
          script:
            - pipe: atlassian/aws-elasticbeanstalk-deploy:0.7.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                APPLICATION_NAME: "Beehive API Production"
                ENVIRONMENT_NAME: "beehive-api-production-env"
                ZIP_FILE: "application.zip"
                S3_BUCKET: "elasticbeanstalk-ap-southeast-1-565186916354"
                VERSION_LABEL: "beehive-$BITBUCKET_BRANCH-$BITBUCKET_BUILD_NUMBER"
definitions:
  caches:
    composer-cache: /composer/cache
